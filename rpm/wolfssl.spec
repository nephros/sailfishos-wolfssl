# 
# Do NOT Edit the Auto-generated Part!
# Generated by: spectacle version 0.34.2
# 

Name:       wolfssl

# >> macros
# << macros
%define pkgconfigdir %{_libdir}/pkgconfig
%define sover 43
%define lname lib%{name}

Summary:    A small, fast, portable implementation of TLS/SSL for embedded devices
Version:    5.7.6
Release:    0
Group:      Development/Libraries
License:    GPLv2
URL:        https://www.wolfssl.com
Source0:    %{name}-%{version}.tar.xz
Source100:  wolfssl.yaml
Source101:  wolfssl-rpmlintrc
Requires(post): /sbin/ldconfig
Requires(postun): /sbin/ldconfig
BuildRequires:  pkgconfig(openssl)
BuildRequires:  pkgconfig(zlib)
BuildRequires:  autoconf
BuildRequires:  automake
BuildRequires:  gcc
BuildRequires:  glibc-devel
BuildRequires:  glibc-headers
BuildRequires:  openssl
BuildRequires:  pkgconfig
BuildRequires:  sed

%description
The wolfSSL embedded SSL library (formerly CyaSSL) is a lightweight SSL/TLS
library written in ANSI C and targeted for embedded, RTOS, and
resource-constrained environments - primarily because of its small size,
speed, and feature set.

It is commonly used in standard operating environments as well because of
its royalty-free pricing and excellent cross platform support. wolfSSL
supports industry standards up to the current TLS 1.3 and DTLS 1.3, is up
to 20 times smaller than OpenSSL, and offers progressive ciphers such as
ChaCha20, Curve25519, Blake2b and Post-Quantum TLS 1.3 groups.

User benchmarking and feedback reports dramatically better performance when
using wolfSSL over OpenSSL.

%if "%{?vendor}" == "chum"
Title: wolfSSL
DeveloperName: wolfSSL Inc.
PackagedBy: nephros
Categories:
 - Library
Custom:
  Repo: https://github.com/wolfSSL/wolfssl
  PackagingRepo: https://github.com/nephros/sailfishos-wolfssl
Links:
  Homepage: %{url}
%endif


%package examples
Summary:    Example binaries for %{name}
Group:      Applications
Requires:   %{name} = %{version}-%{release}

%description examples
%{summary}.

%package devel
Summary:    Header files and library symbolic links for %{name}
Group:      Development
Requires:   %{name} = %{version}-%{release}

%description devel
%{summary}.

%prep
%setup -q -n %{name}-%{version}/wolfssl

# >> setup
# << setup

%build
# >> build pre
# << build pre

%reconfigure --disable-static \
%ifarch %{arm}
    --with-arm-target=cortex \
%endif
%ifarch aarch64
    --with-arm-target=cortex \
%endif
    --enable-fastmath \
    --enable-sp \
    --enable-sp-math \
%ifarch %{arm}
    --enable-sp-asm \
%endif
%ifarch aarch64
    --enable-sp-asm \
%endif
%ifarch %{ix86}
    --enable-aesni \
%endif
%ifarch %{arm}
    --enable-armasm \
%endif
    --enable-harden \
    --with-libz \
    --disable-benchmark \
    --disable-crypttests \
    --disable-makeclean \
    --enable-examples \
    --enable-supportedcurves \
    --enable-ech \
    --enable-ed25519 \
    --enable-pkcs7 \
    --enable-sys-ca-certs \
    --disable-crl \
    --disable-ocsp \
    --enable-session-ticket \
    --enable-filesystem \
    --enable-altcertchains \
    --enable-renegotiation-indication \
    --enable-ip-alt-name \
    --enable-lighty \
    --with-eccminsz=0 \
    --enable-sha224 \
    --enable-keygen \
    --enable-certgen

%make_build

# >> build post
# << build post

%install
rm -rf %{buildroot}
# >> install pre
# << install pre
%make_install

# >> install post
rm -rf %{buildroot}%{_docdir}
# << install post

%post -p /sbin/ldconfig

%postun -p /sbin/ldconfig

%files
%defattr(-,root,root,-)
%{_libdir}/%{lname}.so.%{sover}*
# >> files
# << files

%files examples
%defattr(-,root,root,-)
# >> files examples
# << files examples

%files devel
%defattr(-,root,root,-)
%license COPYING
%{_libdir}/%{lname}.so
%{_includedir}/%{name}/
%{pkgconfigdir}/*pc
%{_bindir}/%{name}-config
# >> files devel
# << files devel
